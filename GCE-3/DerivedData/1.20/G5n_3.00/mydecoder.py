inputBytes = [
0xfe,
0x03,
0x01,
0xf1,
0x91,
0x91,
0x61,
0x01,
0x81,
0x41,
0x41,
0x81,
0x01,
0x81,
0x41,
0x81,
0xf1,
0x01,
0xe1,
0x11,
0x11,
0x21,
0x01,
0xf1,
0x91,
0x91,
0x61,
0x01,
0x81,
0x81,
0xe1,
0x81,
0x81,
0x01,
0xf1,
0x91,
0x91,
0x61,
0x01,
0x61,
0x91,
0x91,
0x11,
0x01,
0x11,
0xf1,
0x11,
0x01,
0x03,
0xfe,
0xff,
0x20,
0x20,
0x27,
0x21,
0x22,
0x24,
0x20,
0x23,
0x25,
0x25,
0x25,
0x20,
0x23,
0x24,
0x24,
0x27,
0x20,
0x23,
0x24,
0x24,
0x22,
0x20,
0x27,
0x21,
0x22,
0x24,
0x20,
0x20,
0x20,
0x23,
0x20,
0x20,
0x20,
0x27,
0x24,
0x24,
0x23,
0x20,
0x24,
0x24,
0x24,
0x23,
0x20,
0x20,
0x27,
0x20,
0x20,
0x20,
0xff,
0xff,
0x00,
0x80,
0x80,
0x80,
0x00,
0x80,
0x00,
0x00,
0x9e,
0x33,
0x2d,
0x2d,
0xb3,
0x9e,
0x80,
0x00,
0x80,
0x80,
0x80,
0x00,
0x80,
0x80,
0x80,
0x00,
0x00,
0x00,
0x00,
0x00,
0x80,
0x80,
0x00,
0x00,
0x80,
0x80,
0x9e,
0x33,
0xad,
0xad,
0xb3,
0x1e,
0x80,
0x80,
0x80,
0x00,
0x80,
0x80,
0x80,
0x00,
0xff,
0x1f,
0x20,
0x2f,
0x28,
0x2f,
0x20,
0x2f,
0x21,
0x22,
0x2f,
0x20,
0x22,
0x20,
0x2f,
0x28,
0x2f,
0x20,
0x2f,
0x22,
0x22,
0x20,
0x2f,
0x22,
0x22,
0x20,
0x20,
0x20,
0x20,
0x20,
0x2f,
0x2a,
0x25,
0x20,
0x2f,
0x28,
0x2f,
0x20,
0x2f,
0x28,
0x2f,
0x20,
0x2b,
0x2a,
0x2e,
0x20,
0x20,
0x2f,
0x20,
0x20,
0x1f
]

# rather arbitrary, I know
width = 50
height = 30
# WARNING GLOBALS BELOW

# as composed from 64 lines of pixxxels
screen = []

x = 0
y0 = 0

def addEightLines():
    global screen
    global y0
    for i in range(8):
        screen.append("")
        if y0 + i >=  height:
            break

# write a byte as bits, thus to 8 lines
def outputByte(toOutput):
    global screen
    global x
    global y0

    alreadyLines = len(screen)
    if (alreadyLines <= y0):
        if (alreadyLines < 64):
            # before we fill 64 lines, just go at it
            addEightLines()
        else:
            # gracefully allow padding if it is padded with 0x00
            if(toOutput == "00000000"):
                print("Padding detected, ignoring")
                return
            else:
                print("WARNING, overrun")
                addEightLines()

    # k is the bit in byte
    for k in range(0,8):
        if y0 + k >=  height:
            break
        screen[y0 + k] += toOutput[7 - k]
        
    # move to next x ...
    x = x + 1
    
    # until arrive to end of line, then move to next 8 lines
    if (x == width):
        x = 0
        y0 = y0 + 8 # bits in byte

for byteIndex in range(len(inputBytes)):
    actual = inputBytes[byteIndex]
    
    # take binary form, remove 0b prefix
    binary = bin(actual)[2:]
    # fill up to 8 bits
    binary = "0" * (8 - len(binary)) + binary
    
    #print("Consuming byte " + str(byteIndex) + " with value of " + str(actual) + " / " + binary)

    outputByte(binary)

print(f'Result is {len(screen)}')

for l in range(len(screen)):
    print(screen[l].replace("0", "░").replace("1", "█"))

print("Done")
for l in range(len(screen)):
    print(screen[l])