inputBytes = [
0x00,
0x00,
0x7e,
0xfc,
0xfe,
0xff,
0xff,
0x00,
0x8f,
0x07,
0x07,
0x05,
0x8f,
0xff,
0xff,
0x01,
0x00,
0xff,
0xff,
0x14,
0x7f,
0x7f,
0x00,
0x3f,
0x3f,
0x00,
0x1f,
0x1f,
0x01,
0x0f,
0x8f,
0xe7,
0xc7,
0x07,
0x07,
0x00,
0x83,
0xe3,
0x03,
0x03,
0x00,
0xc3,
0xf3,
0xf9,
0xf9,
0x00,
0xf1,
0xc1,
0x01,
0x81,
0xe1,
0xf1,
0xf1,
0x00,
0xc1,
0xe1,
0xf1,
0xe3,
0x03,
0x03,
0x00,
0xe3,
0xf3,
0xc3,
0x07,
0x87,
0xc7,
0xc7,
0x00,
0xcf,
0x0f,
0x0f,
0x00,
0x1f,
0x9f,
0x1f,
0x3f,
0x3f,
0x00,
0x7f,
0x7f,
0x00,
0xff,
0xff,
0x13,
0x00,
0xff,
0xff,
0x01,
0x8f,
0x07,
0x07,
0x05,
0x8f,
0xff,
0xff,
0x00,
0xfe,
0xfc,
0xff,
0xff,
0x0e,
0x00,
0xff,
0xff,
0x08,
0x7f,
0x3f,
0x1f,
0x0f,
0x0f,
0x00,
0xc7,
0x03,
0x03,
0x00,
0xc1,
0xe0,
0x00,
0x00,
0x01,
0xc0,
0xfc,
0xff,
0xff,
0x00,
0x3e,
0x0c,
0x86,
0xe7,
0xf3,
0xf3,
0x00,
0xf2,
0xe6,
0xff,
0xff,
0x01,
0xfc,
0x1f,
0x07,
0xc3,
0xf3,
0x43,
0x07,
0x3e,
0xff,
0xff,
0x01,
0x03,
0x03,
0x00,
0xfb,
0xff,
0xff,
0x00,
0xfb,
0x03,
0x03,
0x00,
0xff,
0xff,
0x00,
0xfe,
0x07,
0x03,
0x23,
0x33,
0x33,
0x00,
0xf2,
0xfb,
0xff,
0xff,
0x00,
0xf8,
0x80,
0x00,
0x00,
0x00,
0xc0,
0x80,
0x01,
0xc3,
0xe3,
0x07,
0x0f,
0x0f,
0x00,
0x1f,
0x3f,
0x7f,
0xff,
0xff,
0x08,
0x00,
0xff,
0xff,
0x1e,
0x00,
0xff,
0xff,
0x01,
0x7f,
0x3f,
0x8f,
0xc7,
0x03,
0xc1,
0xf0,
0xf8,
0xc0,
0x00,
0xf0,
0xfe,
0xff,
0xff,
0x00,
0xfe,
0xff,
0xff,
0x01,
0xf8,
0xfc,
0xff,
0xff,
0x02,
0xf8,
0xe0,
0xe1,
0xc7,
0xc7,
0x02,
0xe3,
0xff,
0xff,
0x01,
0xc0,
0xc0,
0x00,
0xdc,
0xfc,
0xfc,
0x00,
0xdc,
0xc0,
0xc0,
0x00,
0xff,
0xff,
0x01,
0xfe,
0xf0,
0xe0,
0xc3,
0xc7,
0xe0,
0xf0,
0xfe,
0xff,
0xff,
0x01,
0xe0,
0xc0,
0xc7,
0xcf,
0xcf,
0x02,
0xff,
0xff,
0x02,
0xe0,
0xfc,
0xff,
0xff,
0x00,
0xfe,
0xff,
0xff,
0x00,
0xfc,
0x00,
0x00,
0x00,
0xc0,
0xfc,
0xf8,
0x80,
0x01,
0xc3,
0xc7,
0x8f,
0x3f,
0x7f,
0xff,
0xff,
0x01,
0x00,
0xff,
0xff,
0x1e,
0x00,
0x8f,
0xe3,
0xf0,
0xfc,
0xfe,
0xff,
0xc1,
0xdd,
0xe3,
0xff,
0xc1,
0xd5,
0xd5,
0x00,
0xff,
0xc1,
0xdd,
0xdd,
0x00,
0xff,
0xc3,
0xf5,
0xc3,
0xff,
0xf1,
0xc7,
0xf1,
0xff,
0xff,
0x04,
0xfd,
0xc1,
0xfd,
0xff,
0xc1,
0xdd,
0xc1,
0xff,
0xc1,
0xfb,
0xf7,
0xc1,
0xff,
0xc1,
0xd5,
0xd5,
0x00,
0xff,
0xff,
0x07,
0xc1,
0xf9,
0xe3,
0xf9,
0xc1,
0xff,
0xdd,
0xc1,
0xdd,
0xff,
0xc9,
0xe3,
0xc9,
0xff,
0xff,
0x09,
0xf8,
0xff,
0xff,
0x06,
0xfe,
0xfc,
0xf0,
0xe3,
0x8f,
0x00,
0xff,
0xff,
0x1e,
0x00,
0xff,
0xff,
0x03,
0xe7,
0xf3,
0x39,
0xdc,
0xee,
0xe6,
0xc3,
0x83,
0x0b,
0x1b,
0x3b,
0x7b,
0xfb,
0xf7,
0xf6,
0xee,
0xdc,
0x39,
0xf3,
0xe7,
0xff,
0xff,
0x02,
0xe7,
0xf3,
0x39,
0xdc,
0xee,
0xe6,
0xc3,
0x83,
0x0b,
0x1b,
0x3b,
0x7b,
0xfb,
0xf7,
0xf6,
0xee,
0xdc,
0x39,
0xf3,
0xe7,
0xff,
0xff,
0x02,
0xe7,
0xf3,
0x39,
0xdc,
0xee,
0xe6,
0xc3,
0x83,
0x0b,
0x1b,
0x3b,
0x7b,
0xfb,
0xf7,
0xf6,
0xee,
0xdc,
0x39,
0xf3,
0xe7,
0xff,
0xff,
0x06,
0x00,
0xfe,
0xfe,
0x00,
0xf2,
0xf2,
0x00,
0xfe,
0xfe,
0x00,
0x00,
0xff,
0xff,
0x03,
0x00,
0xff,
0xff,
0x0e,
0x7f,
0xff,
0xff,
0x01,
0xe3,
0xc1,
0xc1,
0x05,
0xe3,
0xff,
0xff,
0x01,
0x00,
0xff,
0xff,
0x03,
0xf3,
0xe7,
0xce,
0x9d,
0xbb,
0xb7,
0xf7,
0xef,
0xef,
0x00,
0xee,
0xee,
0x00,
0xef,
0xef,
0x00,
0xf7,
0xb7,
0xbb,
0x9d,
0xce,
0xe7,
0xf3,
0xff,
0xff,
0x02,
0xf3,
0xe7,
0xce,
0x9d,
0xbb,
0xb7,
0xf7,
0xef,
0xef,
0x00,
0xee,
0xee,
0x00,
0xef,
0xef,
0x00,
0xf7,
0xb7,
0xbb,
0x9d,
0xce,
0xe7,
0xf3,
0xff,
0xff,
0x02,
0xf3,
0xe7,
0xce,
0x9d,
0xbb,
0xb7,
0xf7,
0xef,
0xef,
0x00,
0xee,
0xee,
0x00,
0xef,
0xef,
0x00,
0xf7,
0xb7,
0xbb,
0x9d,
0xce,
0xe7,
0xf3,
0xff,
0xff,
0x06,
0xe0,
0xeb,
0xeb,
0x04,
0xe0,
0xff,
0xff,
0x03,
0x00,
0xff,
0xff,
0x01,
0xe3,
0xc1,
0xc1,
0x05,
0xe3,
0xff,
0xff,
0x01,
0x7f,
0x00,
0x00,
0x00,
0x01,
0x01,
0x0c,
0x00,
0x01,
0x01,
0x5c,
0x00,
0x01,
0x01,
0x0c,
0x00,
0x00,
0x00
]

# rather arbitrary, I know
width = 128
height = 64
# WARNING GLOBALS BELOW

# as composed from 64 lines of pixxxels
screen = []

x = 0
y0 = 0

def addEightLines():
    global screen
    global y0
    for i in range(8):
        screen.append("")
        if y0 + i >=  height:
            break

# write a byte as bits, thus to 8 lines
def outputByte(toOutput):
    global screen
    global x
    global y0

    alreadyLines = len(screen)
    if (alreadyLines <= y0):
        if (alreadyLines < 64):
            # before we fill 64 lines, just go at it
            addEightLines()
        else:
            # gracefully allow padding if it is padded with 0x00
            if(toOutput == "00000000"):
                print("Padding detected, ignoring")
                return
            else:
                print("WARNING, overrun")
                addEightLines()

    # k is the bit in byte
    for k in range(0,8):
        if y0 + k >=  height:
            break
        screen[y0 + k] += toOutput[7 - k]
        
    # move to next x ...
    x = x + 1
    
    # until arrive to end of line, then move to next 8 lines
    if (x == width):
        x = 0
        y0 = y0 + 8 # bits in byte

for byteIndex in range(len(inputBytes)):
    actual = inputBytes[byteIndex]
    
    # take binary form, remove 0b prefix
    binary = bin(actual)[2:]
    # fill up to 8 bits
    binary = "0" * (8 - len(binary)) + binary
    
    #print("Consuming byte " + str(byteIndex) + " with value of " + str(actual) + " / " + binary)

    outputByte(binary)

print(f'Result is {len(screen)}')

for l in range(len(screen)):
    print(screen[l].replace("0", "░").replace("1", "█"))

print("Done")
for l in range(len(screen)):
    print(screen[l])